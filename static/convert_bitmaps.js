// Utility to convert X11 bitmap data to canvas-drawable format
// The original bitmaps are in X11 format (1-bit per pixel, LSB first)

const planetBitmaps = {
    // Galactic map planets (16x16)
    mplanet: {
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x04, 0x10, 0x02, 0x20, 0xc2, 0x21, 0x21, 0x42,
               0x01, 0x42, 0x01, 0x41, 0x81, 0x40, 0x81, 0x40, 0x02, 0x20, 0x82, 0x20,
               0x04, 0x10, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    fedmplanet: {
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x04, 0x10, 0x02, 0x20, 0x82, 0x20, 0xc1, 0x41,
               0xc1, 0x41, 0xe1, 0x43, 0xe1, 0x43, 0x71, 0x47, 0x32, 0x26, 0x02, 0x20,
               0x04, 0x10, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    rommplanet: {
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x84, 0x10, 0x82, 0x20, 0xc2, 0x21, 0xa1, 0x42,
               0x31, 0x45, 0xd1, 0x44, 0x11, 0x47, 0xa1, 0x42, 0xc2, 0x21, 0x82, 0x20,
               0x84, 0x10, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    klimplanet: {
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x84, 0x10, 0x82, 0x20, 0x82, 0x20, 0xc1, 0x41,
               0xc1, 0x41, 0xc1, 0x41, 0xb1, 0x42, 0x71, 0x47, 0x3a, 0x27, 0x0a, 0x2c,
               0x04, 0x10, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    orimplanet: {
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x04, 0x10, 0x82, 0x20, 0xa2, 0x22, 0xf1, 0x47,
               0x21, 0x42, 0xb9, 0x4e, 0x21, 0x42, 0xf1, 0x47, 0xa2, 0x22, 0x82, 0x20,
               0x04, 0x10, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    indmplanet: {
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x04, 0x10, 0x02, 0x20, 0xc2, 0x21, 0x21, 0x42,
               0x01, 0x42, 0x01, 0x41, 0x81, 0x40, 0x81, 0x40, 0x02, 0x20, 0x82, 0x20,
               0x04, 0x10, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    // Resource planets (16x16) - 3-bit encoding: AGR|REP|FUEL
    mplanet001: { // Fuel only
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x04, 0x10, 0x02, 0x20, 0x02, 0x20, 0x01, 0x4c,
               0x01, 0x54, 0x01, 0x54, 0x01, 0x54, 0x01, 0x5c, 0x02, 0x20, 0x02, 0x20,
               0x04, 0x10, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    mplanet010: { // Repair only
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x44, 0x11, 0x42, 0x21, 0xc2, 0x21, 0x81, 0x40,
               0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0xc2, 0x21, 0x42, 0x21,
               0x44, 0x11, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    mplanet011: { // Fuel + Repair
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x44, 0x11, 0x42, 0x21, 0xc2, 0x21, 0x81, 0x4c,
               0x81, 0x54, 0x81, 0x54, 0x81, 0x54, 0x81, 0x5c, 0xc2, 0x21, 0x42, 0x21,
               0x44, 0x11, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    mplanet100: { // Agricultural only
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x04, 0x10, 0x1a, 0x20, 0x1a, 0x20, 0x01, 0x40,
               0x19, 0x40, 0x25, 0x40, 0x3d, 0x40, 0x25, 0x40, 0x1a, 0x20, 0x1a, 0x20,
               0x04, 0x10, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    mplanet101: { // Agricultural + Fuel
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x04, 0x10, 0x1a, 0x20, 0x1a, 0x20, 0x01, 0x4c,
               0x19, 0x54, 0x25, 0x54, 0x3d, 0x54, 0x25, 0x5c, 0x1a, 0x20, 0x1a, 0x20,
               0x04, 0x10, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    mplanet110: { // Agricultural + Repair
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x44, 0x11, 0x5a, 0x21, 0xda, 0x21, 0x81, 0x40,
               0x99, 0x40, 0xa5, 0x40, 0xbd, 0x40, 0xa5, 0x40, 0xda, 0x21, 0x5a, 0x21,
               0x44, 0x11, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    },
    mplanet111: { // All resources
        width: 16,
        height: 16,
        data: [0xe0, 0x03, 0x18, 0x0c, 0x44, 0x11, 0x5a, 0x21, 0xda, 0x21, 0x81, 0x4c,
               0x99, 0x54, 0xa5, 0x54, 0xbd, 0x54, 0xa5, 0x5c, 0xda, 0x21, 0x5a, 0x21,
               0x44, 0x11, 0x18, 0x0c, 0xe0, 0x03, 0x00, 0x00]
    }
};

// Convert X11 bitmap data to ImageData
function convertBitmapToImageData(bitmap, color = '#ffffff') {
    const { width, height, data } = bitmap;
    const canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext('2d');
    const imageData = ctx.createImageData(width, height);
    
    // Parse color
    let r, g, b;
    if (color.startsWith('#')) {
        const hex = color.slice(1);
        r = parseInt(hex.substr(0, 2), 16);
        g = parseInt(hex.substr(2, 2), 16);
        b = parseInt(hex.substr(4, 2), 16);
    } else {
        r = g = b = 255;
    }
    
    // Convert bitmap data (2 bytes per row for 16-pixel width)
    for (let y = 0; y < height; y++) {
        const byteIndex = y * 2;
        const byte1 = data[byteIndex];
        const byte2 = data[byteIndex + 1];
        
        for (let x = 0; x < width; x++) {
            let bit;
            if (x < 8) {
                bit = (byte1 >> x) & 1;
            } else {
                bit = (byte2 >> (x - 8)) & 1;
            }
            
            const pixelIndex = (y * width + x) * 4;
            if (bit) {
                imageData.data[pixelIndex] = r;
                imageData.data[pixelIndex + 1] = g;
                imageData.data[pixelIndex + 2] = b;
                imageData.data[pixelIndex + 3] = 255;
            } else {
                imageData.data[pixelIndex + 3] = 0; // Transparent
            }
        }
    }
    
    return imageData;
}

// Create pre-rendered canvases for all planet types and colors
function createPlanetSprites() {
    const sprites = {};
    const teams = ['fed', 'rom', 'kli', 'ori', 'ind'];
    const teamColors = {
        fed: '#ffff00',
        rom: '#ff0000',
        kli: '#00ff00',
        ori: '#00ffff',
        ind: '#888888'
    };
    
    // Team-specific planets
    teams.forEach(team => {
        const bitmapName = team + 'mplanet';
        if (planetBitmaps[bitmapName]) {
            sprites[bitmapName] = createSpriteCanvas(planetBitmaps[bitmapName], teamColors[team]);
        }
    });
    
    // Resource planets (neutral gray)
    ['mplanet001', 'mplanet010', 'mplanet011', 'mplanet100', 'mplanet101', 'mplanet110', 'mplanet111'].forEach(name => {
        sprites[name] = createSpriteCanvas(planetBitmaps[name], '#888888');
    });
    
    // Base planet
    sprites['mplanet'] = createSpriteCanvas(planetBitmaps.mplanet, '#888888');
    
    return sprites;
}

function createSpriteCanvas(bitmap, color) {
    const canvas = document.createElement('canvas');
    canvas.width = bitmap.width;
    canvas.height = bitmap.height;
    const ctx = canvas.getContext('2d');
    const imageData = convertBitmapToImageData(bitmap, color);
    ctx.putImageData(imageData, 0, 0);
    return canvas;
}

// Export for use in browser
window.planetBitmaps = planetBitmaps;
window.convertBitmapToImageData = convertBitmapToImageData;
window.createPlanetSprites = createPlanetSprites;